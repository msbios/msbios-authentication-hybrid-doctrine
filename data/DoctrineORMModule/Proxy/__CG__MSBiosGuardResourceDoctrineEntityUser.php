<?php

namespace DoctrineORMModule\Proxy\__CG__\MSBios\Guard\Resource\Doctrine\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class User extends \MSBios\Guard\Resource\Doctrine\Entity\User implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }

    /**
     * {@inheritDoc}
     * @param string $name
     */
    public function & __get($name)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__get', [$name]);

        return parent::__get($name);
    }

    /**
     * {@inheritDoc}
     * @param string $name
     * @param mixed  $value
     */
    public function __set($name, $value)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__set', [$name, $value]);

        return parent::__set($name, $value);
    }

    /**
     * {@inheritDoc}
     * @param  string $name
     * @return boolean
     */
    public function __isset($name)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__isset', [$name]);

        return parent::__isset($name);

    }

    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'MSBios\\Guard\\Resource\\Doctrine\\Entity\\User' . "\0" . 'username', '' . "\0" . 'MSBios\\Guard\\Resource\\Doctrine\\Entity\\User' . "\0" . 'firstname', '' . "\0" . 'MSBios\\Guard\\Resource\\Doctrine\\Entity\\User' . "\0" . 'lastname', '' . "\0" . 'MSBios\\Guard\\Resource\\Doctrine\\Entity\\User' . "\0" . 'email', '' . "\0" . 'MSBios\\Guard\\Resource\\Doctrine\\Entity\\User' . "\0" . 'password', '' . "\0" . 'MSBios\\Guard\\Resource\\Doctrine\\Entity\\User' . "\0" . 'state', '' . "\0" . 'MSBios\\Guard\\Resource\\Doctrine\\Entity\\User' . "\0" . 'type', '' . "\0" . 'MSBios\\Guard\\Resource\\Doctrine\\Entity\\User' . "\0" . 'options', '' . "\0" . 'MSBios\\Guard\\Resource\\Doctrine\\Entity\\User' . "\0" . 'roles', 'adapter', 'origData', 'data', 'storage', 'flag', 'iteratorClass', 'protectedProperties', '' . "\0" . 'MSBios\\Guard\\Resource\\Doctrine\\Entity\\User' . "\0" . 'createdAt', '' . "\0" . 'MSBios\\Guard\\Resource\\Doctrine\\Entity\\User' . "\0" . 'modifiedAt', '' . "\0" . 'MSBios\\Guard\\Resource\\Doctrine\\Entity\\User' . "\0" . 'rowStatus'];
        }

        return ['__isInitialized__', '' . "\0" . 'MSBios\\Guard\\Resource\\Doctrine\\Entity\\User' . "\0" . 'username', '' . "\0" . 'MSBios\\Guard\\Resource\\Doctrine\\Entity\\User' . "\0" . 'firstname', '' . "\0" . 'MSBios\\Guard\\Resource\\Doctrine\\Entity\\User' . "\0" . 'lastname', '' . "\0" . 'MSBios\\Guard\\Resource\\Doctrine\\Entity\\User' . "\0" . 'email', '' . "\0" . 'MSBios\\Guard\\Resource\\Doctrine\\Entity\\User' . "\0" . 'password', '' . "\0" . 'MSBios\\Guard\\Resource\\Doctrine\\Entity\\User' . "\0" . 'state', '' . "\0" . 'MSBios\\Guard\\Resource\\Doctrine\\Entity\\User' . "\0" . 'type', '' . "\0" . 'MSBios\\Guard\\Resource\\Doctrine\\Entity\\User' . "\0" . 'options', '' . "\0" . 'MSBios\\Guard\\Resource\\Doctrine\\Entity\\User' . "\0" . 'roles', 'adapter', 'origData', 'data', 'storage', 'flag', 'iteratorClass', 'protectedProperties', '' . "\0" . 'MSBios\\Guard\\Resource\\Doctrine\\Entity\\User' . "\0" . 'createdAt', '' . "\0" . 'MSBios\\Guard\\Resource\\Doctrine\\Entity\\User' . "\0" . 'modifiedAt', '' . "\0" . 'MSBios\\Guard\\Resource\\Doctrine\\Entity\\User' . "\0" . 'rowStatus'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (User $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function init()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'init', []);

        return parent::init();
    }

    /**
     * {@inheritDoc}
     */
    public function getUsername()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUsername', []);

        return parent::getUsername();
    }

    /**
     * {@inheritDoc}
     */
    public function setUsername($username)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUsername', [$username]);

        return parent::setUsername($username);
    }

    /**
     * {@inheritDoc}
     */
    public function getFirstname()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFirstname', []);

        return parent::getFirstname();
    }

    /**
     * {@inheritDoc}
     */
    public function setFirstname($firstname)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFirstname', [$firstname]);

        return parent::setFirstname($firstname);
    }

    /**
     * {@inheritDoc}
     */
    public function getLastname()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLastname', []);

        return parent::getLastname();
    }

    /**
     * {@inheritDoc}
     */
    public function setLastname($lastname)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLastname', [$lastname]);

        return parent::setLastname($lastname);
    }

    /**
     * {@inheritDoc}
     */
    public function getEmail()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEmail', []);

        return parent::getEmail();
    }

    /**
     * {@inheritDoc}
     */
    public function setEmail($email)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEmail', [$email]);

        return parent::setEmail($email);
    }

    /**
     * {@inheritDoc}
     */
    public function getPassword()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPassword', []);

        return parent::getPassword();
    }

    /**
     * {@inheritDoc}
     */
    public function setPassword($password)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPassword', [$password]);

        return parent::setPassword($password);
    }

    /**
     * {@inheritDoc}
     */
    public function getState()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getState', []);

        return parent::getState();
    }

    /**
     * {@inheritDoc}
     */
    public function setState($state)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setState', [$state]);

        return parent::setState($state);
    }

    /**
     * {@inheritDoc}
     */
    public function getType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getType', []);

        return parent::getType();
    }

    /**
     * {@inheritDoc}
     */
    public function setType($type)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setType', [$type]);

        return parent::setType($type);
    }

    /**
     * {@inheritDoc}
     */
    public function getOptions()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOptions', []);

        return parent::getOptions();
    }

    /**
     * {@inheritDoc}
     */
    public function setOptions($options)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOptions', [$options]);

        return parent::setOptions($options);
    }

    /**
     * {@inheritDoc}
     */
    public function getRoles()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRoles', []);

        return parent::getRoles();
    }

    /**
     * {@inheritDoc}
     */
    public function addRoles(\Doctrine\Common\Collections\Collection $roles)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addRoles', [$roles]);

        return parent::addRoles($roles);
    }

    /**
     * {@inheritDoc}
     */
    public function addRole(\MSBios\Guard\Resource\Doctrine\Entity\Role $role)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addRole', [$role]);

        return parent::addRole($role);
    }

    /**
     * {@inheritDoc}
     */
    public function removeRoles(\Doctrine\Common\Collections\Collection $roles)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeRoles', [$roles]);

        return parent::removeRoles($roles);
    }

    /**
     * {@inheritDoc}
     */
    public function removeRole(\MSBios\Guard\Resource\Doctrine\Entity\Role $role)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeRole', [$role]);

        return parent::removeRole($role);
    }

    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function addData(array $arr)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addData', [$arr]);

        return parent::addData($arr);
    }

    /**
     * {@inheritDoc}
     */
    public function setData($key, $value = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setData', [$key, $value]);

        return parent::setData($key, $value);
    }

    /**
     * {@inheritDoc}
     */
    public function unsetData($key = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'unsetData', [$key]);

        return parent::unsetData($key);
    }

    /**
     * {@inheritDoc}
     */
    public function getData($key = '', $index = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getData', [$key, $index]);

        return parent::getData($key, $index);
    }

    /**
     * {@inheritDoc}
     */
    public function hasData($key = '')
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasData', [$key]);

        return parent::hasData($key);
    }

    /**
     * {@inheritDoc}
     */
    public function __toArray(array $array = array (
))
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toArray', [$array]);

        return parent::__toArray($array);
    }

    /**
     * {@inheritDoc}
     */
    public function toArray(array $array = array (
))
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'toArray', [$array]);

        return parent::toArray($array);
    }

    /**
     * {@inheritDoc}
     */
    public function toXml(array $array = array (
), $rootName = 'item', $addOpenTag = false, $addCdata = true)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'toXml', [$array, $rootName, $addOpenTag, $addCdata]);

        return parent::toXml($array, $rootName, $addOpenTag, $addCdata);
    }

    /**
     * {@inheritDoc}
     */
    public function toJson(array $array = array (
))
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'toJson', [$array]);

        return parent::toJson($array);
    }

    /**
     * {@inheritDoc}
     */
    public function toString($format = '')
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'toString', [$format]);

        return parent::toString($format);
    }

    /**
     * {@inheritDoc}
     */
    public function __call($method, $args)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__call', [$method, $args]);

        return parent::__call($method, $args);
    }

    /**
     * {@inheritDoc}
     */
    public function getOrigData($key = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOrigData', [$key]);

        return parent::getOrigData($key);
    }

    /**
     * {@inheritDoc}
     */
    public function setOrigData($key = NULL, $data = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOrigData', [$key, $data]);

        return parent::setOrigData($key, $data);
    }

    /**
     * {@inheritDoc}
     */
    public function hasDataChangedFor($field)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasDataChangedFor', [$field]);

        return parent::hasDataChangedFor($field);
    }

    /**
     * {@inheritDoc}
     */
    public function __unset($key)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__unset', [$key]);

        return parent::__unset($key);
    }

    /**
     * {@inheritDoc}
     */
    public function append($value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'append', [$value]);

        return parent::append($value);
    }

    /**
     * {@inheritDoc}
     */
    public function asort()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'asort', []);

        return parent::asort();
    }

    /**
     * {@inheritDoc}
     */
    public function count()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'count', []);

        return parent::count();
    }

    /**
     * {@inheritDoc}
     */
    public function exchangeArray($data)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'exchangeArray', [$data]);

        return parent::exchangeArray($data);
    }

    /**
     * {@inheritDoc}
     */
    public function getArrayCopy()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getArrayCopy', []);

        return parent::getArrayCopy();
    }

    /**
     * {@inheritDoc}
     */
    public function getFlags()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFlags', []);

        return parent::getFlags();
    }

    /**
     * {@inheritDoc}
     */
    public function getIterator()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIterator', []);

        return parent::getIterator();
    }

    /**
     * {@inheritDoc}
     */
    public function getIteratorClass()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIteratorClass', []);

        return parent::getIteratorClass();
    }

    /**
     * {@inheritDoc}
     */
    public function ksort()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'ksort', []);

        return parent::ksort();
    }

    /**
     * {@inheritDoc}
     */
    public function natcasesort()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'natcasesort', []);

        return parent::natcasesort();
    }

    /**
     * {@inheritDoc}
     */
    public function natsort()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'natsort', []);

        return parent::natsort();
    }

    /**
     * {@inheritDoc}
     */
    public function offsetExists($key)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'offsetExists', [$key]);

        return parent::offsetExists($key);
    }

    /**
     * {@inheritDoc}
     */
    public function &offsetGet($key)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'offsetGet', [$key]);

        return parent::offsetGet($key);
    }

    /**
     * {@inheritDoc}
     */
    public function offsetSet($key, $value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'offsetSet', [$key, $value]);

        return parent::offsetSet($key, $value);
    }

    /**
     * {@inheritDoc}
     */
    public function offsetUnset($key)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'offsetUnset', [$key]);

        return parent::offsetUnset($key);
    }

    /**
     * {@inheritDoc}
     */
    public function serialize()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'serialize', []);

        return parent::serialize();
    }

    /**
     * {@inheritDoc}
     */
    public function setFlags($flags)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFlags', [$flags]);

        return parent::setFlags($flags);
    }

    /**
     * {@inheritDoc}
     */
    public function setIteratorClass($class)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIteratorClass', [$class]);

        return parent::setIteratorClass($class);
    }

    /**
     * {@inheritDoc}
     */
    public function uasort($function)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'uasort', [$function]);

        return parent::uasort($function);
    }

    /**
     * {@inheritDoc}
     */
    public function uksort($function)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'uksort', [$function]);

        return parent::uksort($function);
    }

    /**
     * {@inheritDoc}
     */
    public function unserialize($data)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'unserialize', [$data]);

        return parent::unserialize($data);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', []);

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt(\DateTimeInterface $createdAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', [$createdAt]);

        return parent::setCreatedAt($createdAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getModifiedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getModifiedAt', []);

        return parent::getModifiedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setModifiedAt(\DateTimeInterface $modifiedAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setModifiedAt', [$modifiedAt]);

        return parent::setModifiedAt($modifiedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function isRowStatus()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isRowStatus', []);

        return parent::isRowStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function setRowStatus($rowStatus)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRowStatus', [$rowStatus]);

        return parent::setRowStatus($rowStatus);
    }

}
